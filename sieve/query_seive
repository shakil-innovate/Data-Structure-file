#include <bits/stdc++.h>
using namespace std;

int main() {
    int q;
    cin >> q; // Input number of queries

    vector<pair<int, int>> vp(q); // Vector to store all queries (L, R)

    int maxi_r = 0; // Track maximum value of 'r' from all queries

    // Input each query and update maxi_r
    for (int i = 0; i < q; i++) {
        cin >> vp[i].first >> vp[i].second;
        maxi_r = max(maxi_r, vp[i].second);
    }

    // Initialize prime array with all 1s (true)
    vector<int> prime(maxi_r + 1, 1);
    prime[0] = 0; // 0 is not prime
    prime[1] = 0; // 1 is not prime

    // Sieve of Eratosthenes to mark non-prime numbers
    for (int i = 2; i * i <= maxi_r; i++) {
        if (prime[i]) {
            for (int j = i * i; j <= maxi_r; j += i) {
                prime[j] = 0; // Mark multiples of i as non-prime
            }
        }
    }

    // Convert prime array to prefix sum of primes
    for (int i = 1; i <= maxi_r; i++) {
        prime[i] += prime[i - 1];
        // Now prime[i] = number of primes from 1 to i
    }

    // Process each query and print the result
    for (int i = 0; i < q; i++) {
        int l = vp[i].first;
        int r = vp[i].second;

        cout << l << " to " << r << endl;
        cout << "Prime numbers: ";

        // Number of primes in [l, r] = prime[r] - prime[l-1]
        // Handle case when l = 1 (l-1 = 0 is valid)
        int count = prime[r] - prime[l - 1];
        cout << count << endl;
    }

    return 0;
}
