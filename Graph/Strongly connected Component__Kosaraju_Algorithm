#include<bits/stdc++.h>
using namespace std;

stack<int>st;
vector<bool>vis;
 vector<vector<int>>graph,reverse_g,SCC;

 void dfs2(int u,vector<int>&component)
 {
    vis[u]=1;

    component.push_back(u);
    for(auto v:reverse_g[u])
    {
        if(vis[v]==0)  dfs2(v,component);
    }

    
 }

void dfs1(int u)
{
    vis[u]=1;

    for(auto v:graph[u])
    {
        if(vis[v]==0)
        dfs1(v);
    }
    st.push(u);
}

int main()
{
    int node,edge;   cin>>node>>edge;

    graph.resize(node);
    reverse_g.resize(node);

    for(int i=0 ;i<edge ; i++)
    {
        int x,y;    cin>>x>>y;
        graph[x].push_back(y);
        reverse_g[y].push_back(x);
    }

    

    vis.resize(node,0);


    for(int i=0; i<node ; i++)
    {
       if(vis[i]==0)
          dfs1(i);
    }

    fill(vis.begin(),vis.end(),false);

   while(!st.empty())
   {
    int u=st.top();
    st.pop();

      if(vis[u]==0)
      {
        vector<int>component;
         dfs2(u,component);
         SCC.push_back(component);
      }
   }

   cout<<"SCC is "<<SCC.size()<<endl;

   for(int i=0; i<SCC.size() ; i++)
   {
        for(auto com:SCC[i])
        {
            cout<<com<<" ";
        }
        cout<<endl;
   }

}
